{
  "name": "node-cassandra-cql",
  "version": "0.4.4",
  "description": "Node.js driver for Apache Cassandra",
  "author": {
    "name": "Jorge Bay",
    "email": "jorgebaygondra@gmail.com"
  },
  "contributors": [
    {
      "name": "Andrew Kish"
    },
    {
      "name": "Tommy Messbauer"
    },
    {
      "name": "Adam Faulkner"
    },
    {
      "name": "Adrian Pike"
    },
    {
      "name": "Suguru Namura"
    },
    {
      "name": "Jan Schmidle"
    },
    {
      "name": "Sam Grönblom"
    },
    {
      "name": "Daniel Smedegaard Buus"
    },
    {
      "name": "Bryce Baril"
    }
  ],
  "keywords": [
    "cassandra",
    "cql",
    "cql3",
    "connection",
    "pool"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jorgebay/node-cassandra-cql/raw/master/LICENSE.txt"
    }
  ],
  "dependencies": {
    "async": ">= 0.2.5",
    "long": ">= 1.1.2",
    "node-uuid": "1.4.0"
  },
  "devDependencies": {
    "mocha": ">= 1.14.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jorgebay/node-cassandra-cql.git"
  },
  "bugs": {
    "url": "https://github.com/jorgebay/node-cassandra-cql/issues"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha test -R spec -t 5000"
  },
  "readme": "﻿## Node.js CQL Driver for Apache Cassandra\n\nNode.js CQL driver for [Apache Cassandra](http://cassandra.apache.org/) with a small dependency tree written in pure javascript.\n\nThe driver uses Cassandra's binary protocol which was introduced in Cassandra version 1.2.\n\n## Installation\n\n    $ npm install node-cassandra-cql\n\n[![Build Status](https://secure.travis-ci.org/jorgebay/node-cassandra-cql.png)](http://travis-ci.org/jorgebay/node-cassandra-cql)\n\n## Features\n- Connection pooling to multiple hosts\n- Load balancing and automatic failover\n- Plain Old Javascript: no need to generate thrift files\n- [Long][1] and [uuid][0] support\n- Row and field streaming\n\n## Using it\n```javascript\n//Creating a new connection pool to multiple hosts.\nvar cql = require('node-cassandra-cql');\nvar client = new cql.Client({hosts: ['host1:9042', 'host2:9042'], keyspace: 'keyspace1'});\n//Reading\nclient.execute('SELECT key, email, last_name FROM user_profiles WHERE key=?', ['jbay'],\n  function(err, result) {\n    if (err) console.log('execute failed');\n    else console.log('got user profile with email ' + result.rows[0].email);\n  }\n);\n\n//Writing\nclient.execute('UPDATE user_profiles SET birth=? WHERE key=?', [new Date(1950, 5, 1), 'jbay'],\n  cql.types.consistencies.quorum,\n  function(err) {\n    if (err) console.log('failure');\n    else console.log('success');\n  }\n);\n\n//Streaming query rows\nclient.eachRow('SELECT event_time, temperature FROM temperature WHERE station_id=', ['abc'],\n  function(n, row) {\n    //the callback will be invoked per each row as soon as they are received\n    console.log('temperature value', n, row.temperature);\n  },\n  function (err, rowLength) {\n    if (err) console.log('Oh dear...');\n    console.log('%d rows where returned', rowLength);\n  }\n);\n\n//Streaming field\nclient.streamField('SELECT key, photo FROM user_profiles WHERE key=', ['jbay'], \n  function(err, row, photoStream) {\n    //the callback will be invoked per each row as soon as they are received.\n    if (err) console.log('Shame...');\n    else {\n      //The stream is a Readable Stream2 object\n      stdout.pipe(photoStream);\n    }\n  }\n);\n\n//The whole result set as a stream\nclient.stream('SELECT time1, value1 FROM timeseries WHERE key=', ['key123'])\n  .on('readable', function () {\n    //readable is emitted as soon a row is received and parsed\n    var row;\n    while (row = this.read()) {\n      console.log('time %s and value %s', row.time1, row.value1);\n    }\n  })\n  .on('end', function () {\n    //stream ended, there aren't any more rows\n  })\n  .on('error', function (err) {\n    //Something went wrong: err is a response error from Cassandra\n  });\n```\n\n## API\n### Client\n\nThe `Client` maintains a pool of opened connections to the hosts to avoid several time-consuming steps that are involved with the setup of a CQL binary protocol connection (socket connection, startup message, authentication, ...).\n\n*The Client is the recommended driver class to interact with Cassandra nodes*.\n\n#### new Client(options)\n\nConstructs a new client object.\n\n`options` is an object with these slots, only `hosts` is required:\n```\n                hosts: Array of string in host:port format. Port is optional (default 9042).\n             keyspace: Name of keyspace to use.\n             username: User for authentication.\n             password: Password for authentication.\n            staleTime: Time in milliseconds before trying to reconnect to a node.\n    maxExecuteRetries: Maximum amount of times an execute can be retried\n                       using another connection, in case the server is unhealthy.\ngetAConnectionTimeout: Maximum time in milliseconds to wait for a connection from the pool.\n             poolSize: Number of connections to open for each host (default 1)\n```\n\n#### client.connect([callback])\n\nConnects / warms up the pool.\n\nIt ensures the pool is connected. It is not required to call it, internally the driver will call to `connect` when executing a query.\n\nThe optional `callback` parameter will be executed when the pool is connected. If the pool is already connected, it will be called instantly. \n\n#### client.execute(query, [params], [consistency], callback)  \n\nExecutes a CQL query.\n\nThe `query` is the cql query to execute, with `?` placeholders as parameters.\n\nUse one of the values defined in `types.consistencies` for  `consistency`, defaults to quorum.\n\nCallback should take two arguments err and result.\n\n*The driver will replace the placeholders with the `params`, stringified into the query*.\n\n#### client.executeAsPrepared(query, [params], [consistency], callback)\n\nPrepares (the first time) and executes the prepared query.\n\nTo execute a prepared query, the `params` are binary serialized. Using **prepared statements increases performance**, especially for repeated queries.\n\nIn the case the query is already being prepared on a host, it queues the executing of a prepared statement on that host until the preparing finished (the driver will not issue a request to prepare statement more than once).\n\nUse one of the values defined in `types.consistencies` for  `consistency`, defaults to quorum.\n\nCallback should take two arguments err and result.\n\n#### client.eachRow(query, [params], [consistency], rowCallback, endCallback)\n\nPrepares (the first time), executes the prepared query and streams the rows as soon as they are received.\n\nIt executes `rowCallback(n, row)` per each row received, where `n` is the index of the row.\n\nIt executes `endCallback(err, rowLength)` when all rows have been received or there is an error retrieving the row.\n\nUse one of the values defined in `types.consistencies` for  `consistency`, defaults to quorum.\n\n#### client.streamField(query, [params], [consistency], rowCallback, [endCallback])\n\nPrepares (the first time), executes the prepared query and streams the last field of each row.\n\nIt executes `rowCallback(n, row, streamField)` per each row as soon as the first chunk of the last field is received, where `n` is the index of the row.\n\nThe `stream` is a [Readable Streams2](http://nodejs.org/api/stream.html#stream_class_stream_readable) object that contains the raw bytes of the field value.\nIt can be **piped** downstream and provides automatic pause/resume logic (it buffers when not read).\n\nThe `row` object is similar to the one provided on `eachRow`, except that it does not contain the definition of the last column.\n\nUse one of the values defined in `types.consistencies` for  `consistency`, defaults to quorum.\n\nIt executes `endCallback(err, rowLength)` when all rows have been received or there is an error retrieving the row.\n\n#### client.stream(query, [params], [consistency], [callback])\n\nReturns a [Readable Streams2](http://nodejs.org/api/stream.html#stream_class_stream_readable) object in `objectMode`.\nWhen a row can be read from the stream, it will emit a `readable` event.\nIt can be **piped** downstream and provides automatic pause/resume logic (it buffers when not read).\n\nPrepares (the first time), executes the prepared query.\n\nUse one of the values defined in `types.consistencies` for  `consistency`, defaults to quorum.\n\nIt executes `callback(err)` when all rows have been received or there is an error retrieving the row.\n\n#### client.shutdown([callback])\n\nDisconnects the pool.\n\nCloses all connections in the pool. Normally, it should be called once in your application lifetime.\n\nThe optional `callback` parameter will be executed when the pool is disconnected.\n\n----\n\n\n### Connection\n\nIn the case that you need lower level fine-grained control you could use the `Connection` class.\n\nIt represents a connection to a Cassandra node. The consumer has to take care of open and close it.\n\n#### new Connection(options)\n\nConstructs a new connection object.\n\n#### open(callback) \n\nEstablishes a connection, authenticates and sets a keyspace.\n\n#### close(callback)\n\nCloses the connection to a Cassandra node.\n\n#### execute(query, args, consistency, callback)\n\nExecutes a CQL query.\n\n#### prepare(query, callback)\n\nPrepares a CQL query.\n\n#### executePrepared(queryId, args, consistency, callback)\n\nExecutes a previously prepared query (determined by the queryId).\n\n----\n\n### types\n\nThe `types` module contains field definitions that are useful to interact with Cassandra nodes.\n\n#### consistencies\n\nObject that contains the CQL consistencies defined as properties. For example: `consistencies.one`, `consistencies.quorum`, ...\n\n#### dataTypes\n\nObject that contains all the [CQL data types](http://cassandra.apache.org/doc/cql3/CQL.html#types) defined as properties.\n\n#### responseErrorCodes\n\nObject containing all the possible response error codes returned by Cassandra defined as properties.\n\n#### Long()\n\nConstructs a 64-bit two's-complement integer. See [Long API Documentation](http://docs.closure-library.googlecode.com/git/class_goog_math_Long.html).\n\n#### timeuuid()\n\nFunction to generate a uuid __v1__. It uses [node-uuid][0] module to generate and accepts the same arguments.\n\n#### uuid()\n\nFunction to generate a uuid __v4__. It uses [node-uuid][0] module to generate and accepts the same arguments.\n\n----\n\n## Logging\n\nInstances of `Client()` and `Connection()` are `EventEmitter`'s and emit `log` events:\n```javascript\nclient.on('log', function(level, message) {\n  console.log('log event: %s -- %j', level, message);\n});\n```\nThe `level` being passed to the listener can be `info` or `error`.\n\n## Data types\n\nCassandra's bigint data types are parsed as [Long][1].\n\nList / Set datatypes are encoded from / decoded to Javascript Arrays.\n\nMap datatype are encoded from / decoded to Javascript objects with keys as props.\n\nDecimal and Varint are not parsed yet, they are yielded as byte Buffers.\n\n[Check the documentation for data type support →](https://github.com/jorgebay/node-cassandra-cql/wiki/Data-types)\n\n## FAQ\n\n#### How can specify the target data type of a query parameter?\nThe driver tries to guess the target data type, if you want to set the target data type use a param object with\nthe **hint** and **value** properties.\n\nAll the cassandra data types are defined in the object `types.dataTypes`.\n\nFor example:\n\n```javascript\n//hint as string\nvar keyParam = {value: key, hint: 'int'};\nclient.executeAsPrepared('SELECT * from users where k=?', [keyParam], callback);\n\n//hint using dataTypes\nvar keyParam = {value: key, hint: types.dataTypes.int};\nclient.executeAsPrepared('SELECT * from users where k=?', [keyParam], callback);\n```\n\n#### Should I shutdown the pool after executing a query?\nNo, you should only call `client.shutdown` once in your application lifetime.\n\n## License\n\nnode-cassandra-cql is distributed under the [MIT license](http://opensource.org/licenses/MIT).\n\n## Contributions\n\nFeel free to join in to help this project grow!\n\nCheck the [Issue tracker](https://github.com/jorgebay/node-cassandra-cql/issues), there are issues even marked \"New Contributors Welcome\" :)\n\n## Acknowledgements\n\nFrameReader and FrameWriter are based on [node-cql3](https://github.com/isaacbwagner/node-cql3)'s FrameBuilder and FrameParser.\n\n[0]: https://github.com/broofa/node-uuid\n[1]: https://github.com/dcodeIO/Long.js",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jorgebay/node-cassandra-cql",
  "_id": "node-cassandra-cql@0.4.4",
  "_shasum": "6fe1dd6ce46596504adbb242a4700d5dcaa42af5",
  "_from": "node-cassandra-cql@",
  "_resolved": "https://registry.npmjs.org/node-cassandra-cql/-/node-cassandra-cql-0.4.4.tgz"
}
